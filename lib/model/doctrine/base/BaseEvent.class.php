<?php

/**
 * BaseEvent
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $name
 * @property string $website
 * @property enum $status
 * @property enum $type
 * @property integer $industry_id
 * @property integer $country_id
 * @property integer $city_id
 * @property Industry $Industry
 * @property Country $Country
 * @property City $City
 * 
 * @method string   getName()        Returns the current record's "name" value
 * @method string   getWebsite()     Returns the current record's "website" value
 * @method enum     getStatus()      Returns the current record's "status" value
 * @method enum     getType()        Returns the current record's "type" value
 * @method integer  getIndustryId()  Returns the current record's "industry_id" value
 * @method integer  getCountryId()   Returns the current record's "country_id" value
 * @method integer  getCityId()      Returns the current record's "city_id" value
 * @method Industry getIndustry()    Returns the current record's "Industry" value
 * @method Country  getCountry()     Returns the current record's "Country" value
 * @method City     getCity()        Returns the current record's "City" value
 * @method Event    setName()        Sets the current record's "name" value
 * @method Event    setWebsite()     Sets the current record's "website" value
 * @method Event    setStatus()      Sets the current record's "status" value
 * @method Event    setType()        Sets the current record's "type" value
 * @method Event    setIndustryId()  Sets the current record's "industry_id" value
 * @method Event    setCountryId()   Sets the current record's "country_id" value
 * @method Event    setCityId()      Sets the current record's "city_id" value
 * @method Event    setIndustry()    Sets the current record's "Industry" value
 * @method Event    setCountry()     Sets the current record's "Country" value
 * @method Event    setCity()        Sets the current record's "City" value
 * 
 * @package    event
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseEvent extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('event');
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'unique' => true,
             'length' => 255,
             ));
        $this->hasColumn('website', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('status', 'enum', null, array(
             'type' => 'enum',
             'notnull' => true,
             'values' => 
             array(
              0 => 0,
              1 => 1,
             ),
             ));
        $this->hasColumn('type', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'feed',
              1 => 'database',
             ),
             ));
        $this->hasColumn('industry_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('country_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('city_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));

        $this->option('type', 'InnoDB');
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Industry', array(
             'local' => 'industry_id',
             'foreign' => 'id'));

        $this->hasOne('Country', array(
             'local' => 'country_id',
             'foreign' => 'id'));

        $this->hasOne('City', array(
             'local' => 'city_id',
             'foreign' => 'id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $sluggable0 = new Doctrine_Template_Sluggable();
        $this->actAs($timestampable0);
        $this->actAs($sluggable0);
    }
}